/*
  USCONFIG.h
  this file is generated. Do not change!
*/

#ifndef USCONFIG_H
#define USCONFIG_H

#cmakedefine US_BUILD_SHARED_LIBS
#cmakedefine CppMicroServices_EXPORTS
#cmakedefine US_ENABLE_AUTOLOADING_SUPPORT
#cmakedefine US_ENABLE_THREADING_SUPPORT
#cmakedefine US_ENABLE_RESOURCE_COMPRESSION
#cmakedefine US_GCC_RTTI_WORKAROUND_NEEDED

//-------------------------------------------------------------------
// Header Availability
//-------------------------------------------------------------------

#cmakedefine US_HAVE_STDINT_H
#cmakedefine US_HAVE_TR1_UNORDERED_MAP_H
#cmakedefine US_HAVE_TR1_UNORDERED_SET_H
#cmakedefine US_HAVE_TR1_FUNCTIONAL_H
#cmakedefine US_HAVE_UNORDERED_MAP_H
#cmakedefine US_HAVE_UNORDERED_SET_H
#cmakedefine US_HAVE_FUNCTIONAL_H

#cmakedefine US_HAVE_TR1_UNORDERED_MAP
#cmakedefine US_HAVE_TR1_UNORDERED_SET
#cmakedefine US_HAVE_TR1_FUNCTION
#cmakedefine US_HAVE_STD_UNORDERED_MAP
#cmakedefine US_HAVE_STD_UNORDERED_SET
#cmakedefine US_HAVE_STD_FUNCTION

#cmakedefine US_HAVE_TR1_HASH
#cmakedefine US_HAVE_TR1_HASH_STRUCT
#cmakedefine US_HAVE_TR1_HASH_CLASS
#cmakedefine US_HAVE_STD_HASH
#cmakedefine US_HAVE_STD_HASH_STRUCT
#cmakedefine US_HAVE_STD_HASH_CLASS

///-------------------------------------------------------------------
// Version information
//-------------------------------------------------------------------

#define CppMicroServices_MAJOR_VERSION @CppMicroServices_MAJOR_VERSION@
#define CppMicroServices_MINOR_VERSION @CppMicroServices_MINOR_VERSION@
#define CppMicroServices_PATCH_VERSION @CppMicroServices_PATCH_VERSION@
#define CppMicroServices_VERSION @CppMicroServices_VERSION@
#define CppMicroServices_VERSION_STR "@CppMicroServices_VERSION@"

///-------------------------------------------------------------------
// Macros used by the unit tests
//-------------------------------------------------------------------

#define CppMicroServices_SOURCE_DIR "@CppMicroServices_SOURCE_DIR@"

///-------------------------------------------------------------------
// Macros for import/export declarations
//-------------------------------------------------------------------

#if defined(WIN32)
  #define US_ABI_EXPORT __declspec(dllexport)
  #define US_ABI_IMPORT __declspec(dllimport)
  #define US_ABI_LOCAL
#else
  #define US_ABI_EXPORT __attribute__ ((visibility ("default")))
  #define US_ABI_IMPORT __attribute__ ((visibility ("default")))
  #define US_ABI_LOCAL  __attribute__ ((visibility ("hidden")))
#endif

#ifdef US_BUILD_SHARED_LIBS
  // We are building a shared lib
  #ifdef CppMicroServices_EXPORTS
    #define US_EXPORT US_ABI_EXPORT
  #else
    #define US_EXPORT US_ABI_IMPORT
  #endif
#else
  // We are building a static lib
  // Don't hide RTTI symbols of definitions in the C++ Micro Services
  // headers that are included in DSOs with hidden visibility
  #define US_EXPORT US_ABI_EXPORT
#endif

//-------------------------------------------------------------------
// Namespace customization
//-------------------------------------------------------------------

#define US_NAMESPACE @US_NAMESPACE@

#ifndef US_NAMESPACE /* user namespace */

  # define US_PREPEND_NAMESPACE(name) ::name
  # define US_USE_NAMESPACE
  # define US_BEGIN_NAMESPACE
  # define US_END_NAMESPACE
  # define US_FORWARD_DECLARE_CLASS(name) class name;
  # define US_FORWARD_DECLARE_STRUCT(name) struct name;

#else /* user namespace */

  # define US_PREPEND_NAMESPACE(name) ::US_NAMESPACE::name
  # define US_USE_NAMESPACE using namespace ::US_NAMESPACE;
  # define US_BEGIN_NAMESPACE namespace US_NAMESPACE {
  # define US_END_NAMESPACE }
  # define US_FORWARD_DECLARE_CLASS(name) \
    US_BEGIN_NAMESPACE class name; US_END_NAMESPACE

  # define US_FORWARD_DECLARE_STRUCT(name) \
    US_BEGIN_NAMESPACE struct name; US_END_NAMESPACE

  namespace US_NAMESPACE {}

#endif /* user namespace */

//-------------------------------------------------------------------
// Platform defines
//-------------------------------------------------------------------

#if defined(__APPLE__)
  #define US_PLATFORM_APPLE
#endif

#if defined(__linux__)
  #define US_PLATFORM_LINUX
#endif

#if defined(_WIN32) || defined(_WIN64)
  #define US_PLATFORM_WINDOWS
#else
  #define US_PLATFORM_POSIX
#endif

//-------------------------------------------------------------------
// Macros for suppressing warnings
//-------------------------------------------------------------------

#ifdef _MSC_VER
#define US_MSVC_PUSH_DISABLE_WARNING(wn) \
__pragma(warning(push))                  \
__pragma(warning(disable:wn))
#define US_MSVC_POP_WARNING \
__pragma(warning(pop))
#define US_MSVC_DISABLE_WARNING(wn) \
__pragma(warning(disable:wn))
#else
#define US_MSVC_PUSH_DISABLE_WARNING(wn)
#define US_MSVC_POP_WARNING
#define US_MSVC_DISABLE_WARNING(wn)
#endif

// Do not warn about the usage of deprecated unsafe functions
US_MSVC_DISABLE_WARNING(4996)

// Mark a variable or expression result as unused
#define US_UNUSED(x) (void)(x)

//-------------------------------------------------------------------
// Debuging & Logging
//-------------------------------------------------------------------

#cmakedefine US_ENABLE_DEBUG_OUTPUT

US_BEGIN_NAMESPACE
  enum MsgType { DebugMsg = 0, InfoMsg = 1, WarningMsg = 2, ErrorMsg = 3 };
  typedef void (*MsgHandler)(MsgType, const char *);
  US_EXPORT MsgHandler installMsgHandler(MsgHandler);
US_END_NAMESPACE

//-------------------------------------------------------------------
// Hash Container
//-------------------------------------------------------------------

#ifdef US_HAVE_UNORDERED_MAP_H
  #include <unordered_map>
#elif defined(US_HAVE_TR1_UNORDERED_MAP_H)
  #include <unordered_map>
#endif

#ifdef US_HAVE_UNORDERED_SET_H
  #include <unordered_set>
#elif defined(US_HAVE_TR1_UNORDERED_SET_H)
  #include <unordered_set>
#endif

#ifdef US_HAVE_STD_UNORDERED_MAP
  #define US_UNORDERED_MAP_TYPE ::std::unordered_map
#elif defined(US_HAVE_TR1_UNORDERED_MAP)
  #define US_UNORDERED_MAP_TYPE ::std::unordered_map
#endif

#ifdef US_HAVE_STD_UNORDERED_SET
  #define US_UNORDERED_SET_TYPE ::std::unordered_set
#elif defined(US_HAVE_TR1_UNORDERED_SET)
  #define US_UNORDERED_SET_TYPE ::std::unordered_set
#endif

#ifdef US_HAVE_STD_HASH
  #define US_HASH_FUNCTION_NAMESPACE ::std
  #ifdef US_HAVE_STD_HASH_STRUCT
    #define US_HASH_FUNCTION_FRIEND(type) friend struct ::std::hash<type>
  #elif defined(US_HAVE_STD_HASH_CLASS)
    #define US_HASH_FUNCTION_FRIEND(type) friend class ::std::hash<type>
  #endif
  #define US_HASH_FUNCTION_NAMESPACE_BEGIN namespace std {
  #define US_HASH_FUNCTION_NAMESPACE_END }
#elif defined(US_HAVE_TR1_HASH)
  #define US_HASH_FUNCTION_NAMESPACE ::std
  #ifdef US_HAVE_TR1_HASH_STRUCT
    #define US_HASH_FUNCTION_FRIEND(type) friend struct ::std::hash<type>
  #elif defined(US_HAVE_TR1_HASH_CLASS)
    #define US_HASH_FUNCTION_FRIEND(type) friend class ::std::hash<type>
  #endif
  #define US_HASH_FUNCTION_NAMESPACE_BEGIN namespace std { 
  #define US_HASH_FUNCTION_NAMESPACE_END }
#endif

#define US_HASH_FUNCTION_BEGIN(type) \
template<> \
struct hash<type> : std::unary_function<type, std::size_t> { \
std::size_t operator()(const type& arg) const {

#define US_HASH_FUNCTION_END } };

#define US_HASH_FUNCTION(type, arg) hash<type>()(arg)

#endif // USCONFIG_H
